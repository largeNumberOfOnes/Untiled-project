 


─│┌ ┐└ ┘├ ┤┬ ┴ ┼ ╱ ╲ ╳e


###############################################################################
###############################################################################

What is Type system?

                 Bud
                  |
      *-----------*------------------*
      |                              |
      V                              V
    Simple                        Combine
      |                              |
 *----*-----*---*               *----*-----*----*
 |    |     |   |               |    |     |    |
 V    V     V   V               V    V     V    V
Int Float Char Bool          Struct Cane Arrow List
                |
            *---*---*
            |       |
            V       V
           Int     False

###############################################################################
###############################################################################

What is fense?
fense_000 → token_000_000 ⇄  token_000_001 ⇄ token_000_002 ⇄ ...
    ⇅
fense_001 → token_001_000 ⇄ token_001_001 ⇄ token_001_002 ⇄ ...
    ⇅
fense_002 → token_002_000 ⇄ token_002_001 ⇄ token_002_002 ⇄ ...
    ⇅
fense_003 → token_003_000 ⇄ token_003_001 ⇄ token_003_002 ⇄ ...
    ⇅
fense_004 → token_004_000 ⇄ token_004_001 ⇄ token_004_002 ⇄ ...
    ⇅
fense_005 → token_005_000 ⇄ token_005_001 ⇄ token_005_002 ⇄ ...

where '⇄' means doubly linked list

###############################################################################
###############################################################################

What is TypeTree?

entity:int
    Simple  = 0
    Array   = 1
    Struct  = 2
    Cane    = 3
    List    = 4
    Lenin   = 5
type:long




###############################################################################
###############################################################################

def 
import 
main


How lexical analyzer works?
go through file untill end to create raw(whitout token types) token list
separating tokenList to fenceList



Ugly functions
match NAME : TYPE : ARGS = EXP
print


Pure functions:

Lexical analyzer




CONST
VARIABLE
SOVEREIGN
EXPRESSION
FUNCTION
OPERATOR



###############################################################################
###############################################################################

scanner

             +---------------------------+
             |                           |
             V                           |
S ---+----> WORD --[A-Z, a-z, 0-9, _, ]--+
     |
     *



